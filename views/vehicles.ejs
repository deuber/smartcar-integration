<!-- views/vehicles.ejs -->

<%
  /**
   * Helper function to display a value or a default if undefined or null.
   * @param {any} value - The value to display.
   * @param {string} defaultValue - The default value to display if `value` is undefined or null.
   * @returns {any} - The original value or the default value.
   */
  function displayValue(value, defaultValue = 'N/A') {
    return (value !== undefined && value !== null) ? value : defaultValue;
  }
%>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Vehicle Locations</title>
  <style>
    /* General Styling */
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
      background-color: #f9f9f9;
    }

    /* Container Styling */
    .container {
      width: 90%;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px 0;
    }

    h1 {
      text-align: center;
      margin: 20px 0;
      color: #333;
    }

    h2 {
      text-align: left; /* Aligned to the left */
      margin: 10px 0 5px 0; /* Reduced bottom margin from 10px to 5px */
      color: #333;
    }

    /* Table Styling */
    .vehicle-table {
      width: 100%; /* Full width of the container */
      margin: 0 0 20px 0; /* Reduced bottom margin from 30px to 20px */
      border-collapse: collapse;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      background-color: #fff;
    }
    .vehicle-table th, .vehicle-table td {
      padding: 12px 15px;
      border: 1px solid #ddd;
      text-align: left;
    }
    .vehicle-table th {
      background-color: #f4f4f4;
      font-weight: bold;
    }
    .vehicle-table tbody tr:nth-child(even) {
      background-color: #fafafa;
    }
    .vehicle-table tbody tr:hover {
      background-color: #f1f1f1;
    }
    .no-data {
      text-align: center;
      padding: 20px;
      color: #777;
    }

    /* Map Styling */
    .map-container {
      padding: 10px 0; /* Reduced padding above and below from 20px to 10px */
    }
    #map {
      height: 60vh; /* Adjust height as needed */
      width: 100%; /* Full width of the container */
      border: 1px solid #ddd; /* Optional: Add border for visual separation */
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* Optional: Add shadow for depth */
      margin-top: 10px; /* Reduced space above the map from 20px to 10px */
      box-sizing: border-box; /* Ensures padding and borders are included in the width and height */
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .vehicle-table th, .vehicle-table td {
        padding: 10px 12px;
      }

      #map {
        height: 50vh;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>My Vehicles</h1>

    <!-- Vehicle Details Table -->
    <h2>Details</h2>
    <table class="vehicle-table">
      <thead>
        <tr>
          <th>Brand</th>
          <th>Model</th>
          <th>Year</th>
          <th>Miles</th>
        </tr>
      </thead>
      <tbody>
        <% if (vehicles.length > 0) { %>
          <% vehicles.forEach(vehicle => { %>
            <tr>
              <td><%= displayValue(vehicle.brand) %></td>
              <td><%= displayValue(vehicle.model) %></td>
              <td><%= displayValue(vehicle.year) %></td>
              <td><%= displayValue(vehicle.miles) %></td>
            </tr>
          <% }); %>
        <% } else { %>
          <tr>
            <td colspan="4" class="no-data">No vehicle data available.</td>
          </tr>
        <% } %>
      </tbody>
    </table>

    <!-- Google Map -->
    <!-- Locations -->
    <h2>Locations</h2>
    <div class="map-container">
      <div id="map"></div>
    </div>
  </div>

  <!-- Embed vehicles data for JavaScript -->
  <script>
    // Log the vehicles data received from the server
    console.log('Vehicles Data:', <%- JSON.stringify(vehicles) %>);
  </script>

  <script>
    function initMap() {
      // Initialize the map without a specific center
      const map = new google.maps.Map(document.getElementById('map'), {
        zoom: 4, // Initial zoom, will be adjusted later
        center: { lat: 39.8283, lng: -98.5795 } // Temporary center (Center of USA)
      });

      const vehicles = <%- JSON.stringify(vehicles) %>;
      console.log('Vehicles Array:', vehicles);

      if (vehicles.length === 0) {
        console.warn('No vehicles to display.');
        // Optionally, display a message on the map
        const infoWindow = new google.maps.InfoWindow({
          content: 'No vehicle locations available.'
        });
        infoWindow.setPosition({ lat: 39.8283, lng: -98.5795 });
        infoWindow.open(map);
        return;
      }

      // Initialize bounds
      const bounds = new google.maps.LatLngBounds();

      vehicles.forEach(vehicle => {
        if (vehicle.latitude != null && vehicle.longitude != null) {
          // Define different colors or icons based on brand
          let iconUrl = '';
          const brandUpper = vehicle.brand.toUpperCase();
          if (brandUpper === 'TOYOTA') {
            iconUrl = 'http://maps.google.com/mapfiles/ms/icons/red-dot.png';
          } else if (brandUpper === 'SUBARU') {
            iconUrl = 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png';
          } else {
            iconUrl = 'http://maps.google.com/mapfiles/ms/icons/green-dot.png';
          }

          const position = { lat: vehicle.latitude, lng: vehicle.longitude };

          const marker = new google.maps.Marker({
            position: position,
            map: map,
            title: `${vehicle.year} ${vehicle.brand} ${vehicle.model}`,
            icon: iconUrl // Set the icon based on brand
          });

          const infoWindow = new google.maps.InfoWindow({
            content: `<strong>${vehicle.year} ${vehicle.brand} ${vehicle.model}</strong><br>Brand: ${vehicle.brand}<br>Miles: ${displayValue(vehicle.miles)}`
          });

          marker.addListener('click', () => {
            infoWindow.open(map, marker);
          });

          // Extend the bounds to include this marker's position
          bounds.extend(position);
        } else {
          console.warn(`Invalid location for vehicle: ${vehicle.year} ${vehicle.brand} ${vehicle.model}`);
        }
      });

      // Adjust the map to fit all markers
      if (vehicles.length === 1) {
        // If there's only one vehicle, set a default zoom level
        map.setCenter(bounds.getCenter());
        map.setZoom(12); // Adjust zoom level as needed
      } else {
        map.fitBounds(bounds);
      }
    }

    /**
     * Helper function to display a value or a default if undefined or null.
     * Accessible in the global scope for use in the InfoWindow content.
     */
    function displayValue(value, defaultValue = 'N/A') {
      return (value !== undefined && value !== null) ? value : defaultValue;
    }

    // Handle Google Maps API loading errors
    function gm_authFailure() { 
      alert('Google Maps authentication failed. Please check your API key.');
    }

    // Attach the auth failure handler
    window.gm_authFailure = gm_authFailure;
  </script>

  <!-- Google Maps API Script with Callback -->
  <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=<%= googleApiKey %>&callback=initMap">
  </script>
</body>
</html>
